{"remainingRequest":"/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/igorb/Área de Trabalho/vue/tdsoft/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/home/igorb/Área de Trabalho/vue/tdsoft/src/views/Home.vue","mtime":1602447072934},{"path":"/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/cache-loader/dist/cjs.js","mtime":1602436320763},{"path":"/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602436323139},{"path":"/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/cache-loader/dist/cjs.js","mtime":1602436320763},{"path":"/home/igorb/Área de Trabalho/vue/tdsoft/node_modules/vue-loader/lib/index.js","mtime":1602436323139}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}